import{_ as t,o,c as e,U as s}from"./chunks/framework.74ca4e6c.js";const C=JSON.parse('{"title":"工程指南","description":"","frontmatter":{},"headers":[],"relativePath":"guide.md","filePath":"guide.md"}'),r={name:"guide.md"},l=s('<h1 id="工程指南" tabindex="-1">工程指南 <a class="header-anchor" href="#工程指南" aria-label="Permalink to &quot;工程指南&quot;">​</a></h1><p>本指南旨在介绍CSZC-ToC项目（以下简称ToC）的项目结构和开发指引。</p><blockquote><p>本文档适合初次上手ToC项目的新人阅读。</p></blockquote><h2 id="项目概述" tabindex="-1">项目概述 <a class="header-anchor" href="#项目概述" aria-label="Permalink to &quot;项目概述&quot;">​</a></h2><p>ToC为计算机学院综测系统中的C端子系统，主要针对的使用群体为<strong>学生</strong>，在整个综测评审过程中，主要用于学生查看信息、填报材料的环节。考虑到B端系统对移动端的适配性较低，ToC更加注重于移动端和桌面端的双端全量支持，也即双端的<strong>响应式布局</strong>。</p><p>在此介绍两个重要概念：<strong>WAP端和PC端</strong>：</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>WAP端：窄屏设备，也即移动端，当前配置下默认为屏幕宽度小于800px的设备</p><p>PC端：宽屏设备，也即桌面端，当前配置下默认为屏幕宽度大于等于800px的设备</p></div><p>换言之，WAP端和PC端应该实现完全相同的业务，但在表现形式上应针对宽屏和窄屏设备做出不同的兼容。例如： 宽屏设备在横向空间可以容纳更多的分栏，故可以对卡片等组件使用<strong>横向flex</strong>布局，而窄屏设备横向空间不足，在容纳相同的卡片时应该采用<strong>纵向flex</strong>布局。</p><p>在<a href="#深入响应式布局">深入响应式布局</a>中，还会详细介绍响应式布局实现的解决方案，以及ToC现有基本框架的实现实例。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>特别地，在对WAP端实现完全兼容的情况下，也必须格外注意PC端的使用体验，因为综测系统的特殊性，在很大可能下，用户是通过PC设备访问的。</p></div><p>ToC基于Web构建，用户通过Browser(也就是浏览器)使用ToC。得益于Web技术的飞速发展，现如今已经有非常多开箱即用的技术栈可以帮助我们进行敏捷开发，而基于各方面考虑，ToC的技术选型为：<strong>Vite + Vue3 + TypeScript + SCSS + ElementPlus + Pinia + VueRouter</strong>，下面将会详细介绍各个技术栈如何帮助我们更便捷地构建一个优秀的产品。</p><ol><li><strong>Vite</strong></li></ol><p>Vite是一个现代的前端开发和构建工具，也是Vue3的官方推荐工具链中的构建工具，它开箱即用地提供极速启动服务、热重载技术、TS天然支持等等好处。</p><blockquote><p>Vite 官方文档：<a href="https://cn.vitejs.dev/" target="_blank" rel="noreferrer">https://cn.vitejs.dev/</a></p></blockquote><ol start="2"><li><strong>Vue3</strong></li></ol><p>Vue是中文生态中最火爆的Web前端框架，本项目基于Vue3快速构建SPA(Single Page Application 单页应用)。</p><blockquote><p>Vue3官方文档：<a href="https://cn.vuejs.org/" target="_blank" rel="noreferrer">https://cn.vuejs.org/</a></p></blockquote><div class="info custom-block"><p class="custom-block-title">INFO</p><p>如果你是第一次接触SPA(单页应用)的概念，请不要被迷惑了，单页是指打包构建完只会有一个HTML文件，而所有页面切换、路由等等的操作都被JavaScript接手了，并不是ToC只有一个页面的意思！ToC借助Vite、Vue和VueRouter的能力实现了非常独特的路由管理机制，后面也会详细介绍ToC独具一格的路由设计。</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>你应该着重关注Vue3的<strong>组合式API</strong>，这在ToC中大量使用，甚至于我们不会使用任何非组合式API，也就是选项式API不是ToC中的最佳实践！</p><p>特别地，你需要学会如何使用<strong>setup语法糖</strong>，你将会在编码规范中看到setup语法糖是编写Vue组件的第一范式！！</p><p>同样重要的还有<strong>hook</strong>，你应该学会利用Vue的响应式原理编写或使用自定义hook。</p></div><ol start="3"><li><strong>TypeScript</strong></li></ol><p>ToC全量使用TypeScript！！TS的类型特性将帮助ToC搭建更加健壮且更易维护的模块，任何人为编写的JS都是不被允许的。包括Vue组件在内，ToC所有的模块都基于TypeScript编写。</p><blockquote><p>TypeScript参考文档：<a href="https://www.tslang.cn/docs/home.html" target="_blank" rel="noreferrer">https://www.tslang.cn/docs/home.html</a></p></blockquote><ol start="4"><li><strong>SCSS</strong></li></ol><p>使用这种CSS扩展语言可以帮助我们减少CSS代码量，你不需要对SCSS掌握的很深入，只需要学会利用其嵌套CSS的特性、SCSS变量的特性即可。剩下的，就是深入原生CSS，着重掌握<strong>flex</strong>布局（纵向或横向）。在ToC中，所有自定义样式的第一范式就是：<strong>使用flex布局</strong>。</p><ol start="5"><li><strong>ElementPlus</strong></li></ol><p>ElementPlus 是基于Vue3构建的优秀的组件库，开箱即用地提供了非常多实用组件，ToC已经对ElementPlus进行了一定的客制化且进行了按需引入优化，开发者只需要按照ElementPlus文档自由使用其组件即可。你也可以在运行项目后进入 <code>http://localhost:81/s/guide/</code> 查看组件示例，该部分的源码在 <code>/src/views/guide/index.vue</code> 中。</p><blockquote><p>ElementPlus官方文档：<a href="https://element-plus.org/zh-CN/component/button.html" target="_blank" rel="noreferrer">https://element-plus.org/zh-CN/component/button.html</a></p></blockquote><ol start="6"><li><strong>Pinia</strong></li></ol><p>一个Vue3官方推荐的、非常优雅、深度TS类型支持的Vue3状态库。什么是状态库？你可以理解为放着全局变量的地方，且这些变量是<strong>响应式</strong>的。也就是我们可以非常简便且没有任何负担或者副作用地引用全局状态库里的东西，这在一个对象需要被不同层级的很多组件引用时非常有用，它能保证所有组件的引用值保持同步。</p><blockquote><p>Pinia官方文档：<a href="https://pinia.vuejs.org/zh/" target="_blank" rel="noreferrer">https://pinia.vuejs.org/zh/</a></p></blockquote><div class="info custom-block"><p class="custom-block-title">INFO</p><p>如果响应式变量这个词比较晦涩难懂，那可以理解为：有一个变量B引用了某个<strong>变量A</strong>，而在另一个地方改变了这个变量A，那么不需要手动更改变量B，变量B的值会自动更新，那么这个<strong>变量A</strong>就是响应式变量。响应式变量的值一旦改变，任何依赖于这个响应式变量的对象都会自动重新计算得到新的值。</p><p>关于响应式，你可以查看Vue3官方文档中的深入阐释。</p></div>',31),n=[l];function p(a,c,i,u,g,h){return o(),e("div",null,n)}const S=t(r,[["render",p]]);export{C as __pageData,S as default};
