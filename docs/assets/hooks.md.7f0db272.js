import{_ as s,o as a,c as o,U as n}from"./chunks/framework.c270b6c9.js";const D=JSON.parse('{"title":"useApi Hook 文档","description":"","frontmatter":{},"headers":[],"relativePath":"hooks.md","filePath":"hooks.md"}'),l={name:"hooks.md"},e=n(`<nav class="table-of-contents"><ul><li><a href="#设计理念">设计理念</a></li><li><a href="#定义">定义</a></li><li><a href="#使用">使用</a><ul><li><a href="#在某个组件的-setup-中-直接引用">在某个组件的 setup 中，直接引用</a></li><li><a href="#api方法的入参规约">API方法的入参规约</a></li><li><a href="#在非组件中使用">在非组件中使用</a></li><li><a href="#延申">延申</a></li></ul></li></ul></nav><h1 id="useapi-hook-文档" tabindex="-1"><code>useApi</code> Hook 文档 <a class="header-anchor" href="#useapi-hook-文档" aria-label="Permalink to &quot;\`useApi\` Hook 文档&quot;">​</a></h1><p>ToC汲取已有项目经验，基于业务逻辑封装了一些非常方便且强大的Hooks，本文档将介绍ToC封装的 <code>useApi</code> Hook的使用方法和场景。</p><p>如果你对Hooks还不是那么了解，你可以将其理解为某些从具体逻辑操作中抽离出的逻辑“组件”，特别的是，这些“组件”不提供任何传统意义上的组件功能，而仅仅是逻辑的封装。而得益于Vue3的细粒度的hooks，ToC封装的hooks不仅仅可以在组件中使用，ToC提供的hooks能用在任何场景。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>ToC的Hooks设计时灵感有很大一部分来自React，你可以看到在使用上很有React风格但又能发挥Vue3细粒度优势的Hook。</p></div><ul><li><code>useApi</code> 用于代理api，是ToC最重要的Hook</li><li><strong>禁止直接调用api，所有api调用都必须通过 <code>useApi</code> 的代理！！</strong></li></ul><h2 id="设计理念" tabindex="-1">设计理念 <a class="header-anchor" href="#设计理念" aria-label="Permalink to &quot;设计理念&quot;">​</a></h2><p>api调用是一个数据层的异步调用，而通常其返回数据会被视图层外显。为了将数据加载到视图层，传统的加载方式是：</p><ul><li>定义一个响应式变量</li><li>在组件 <code>mounted</code> 阶段调用api，等待其执行结束，将返回值赋值给响应式变量</li><li>执行开始前显示加载，执行结束（无论成功还是失败）关闭显示。</li></ul><p>不难看出，这一套流程是每一个api调用都必须经历的阶段，也就是在逻辑上是<strong>可复用的</strong>。于是，ToC将这套流程从组件中抽离出来，加以优化改造成一个hook。</p><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><ul><li><p>形式化定义</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AsyncFunction</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">K</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">p</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">K</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ApiHook</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">K</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#FFCB6B;">Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">undefined</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AsyncFunction</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">K</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useApi</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">K</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CommonRequest</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;font-style:italic;">api</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AsyncFunction</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">K</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">loading</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">loadingText</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ApiHook</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">K</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div></li><li><p>说人话版</p><ul><li><p>传入参数：</p><table><thead><tr><th style="text-align:center;">参数位置</th><th style="text-align:center;">类型</th><th style="text-align:center;">必需</th><th style="text-align:center;">默认值</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">0</td><td style="text-align:center;"><code>&lt;T, K&gt;(p?: K) =&gt; Promise&lt;T&gt;</code></td><td style="text-align:center;">是</td><td style="text-align:center;">/</td><td style="text-align:center;">一个返回 <code>Promise</code> 的方法，需要传入在 <code>src/apis</code> 目录下定义的api方法</td></tr><tr><td style="text-align:center;">1</td><td style="text-align:center;"><code>boolean</code></td><td style="text-align:center;">否</td><td style="text-align:center;">true</td><td style="text-align:center;">是否显示加载</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;"><code>boolean</code></td><td style="text-align:center;">否</td><td style="text-align:center;">&#39;&#39;</td><td style="text-align:center;">显示什么加载文字</td></tr></tbody></table></li><li><p>返回值：一个含有<strong>两个元素的数组</strong>，下面是数组中的元素类型</p><table><thead><tr><th style="text-align:center;">位置</th><th style="text-align:center;">类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">0</td><td style="text-align:center;"><code>Ref&lt;T&gt;</code></td><td style="text-align:center;">响应式变量</td></tr><tr><td style="text-align:center;">1</td><td style="text-align:center;"><code>(p?: K) =&gt; Promise&lt;T&gt;</code></td><td style="text-align:center;">加载响应式变量的异步方法</td></tr></tbody></table><blockquote><p>说明：这里的 <code>T</code> | <code>K</code> 由引元的<strong>第一个参数</strong>决定（二者保持一致的对应）。</p></blockquote></li></ul></li></ul><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><h3 id="在某个组件的-setup-中-直接引用" tabindex="-1">在某个组件的 <code>setup</code> 中，直接引用 <a class="header-anchor" href="#在某个组件的-setup-中-直接引用" aria-label="Permalink to &quot;在某个组件的 \`setup\` 中，直接引用&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">captcha</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> setCaptcha</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useApi</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">CaptchaResult</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">(userApi</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">getPicCaptcha)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> handler </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/** 处理组件上的某个点击事件 */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">onClickCaptcha</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">/** 刷新图形验证码 */</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">setCaptcha</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">💡最佳实践</p><p>使用 <code>ES6</code> 的解构语法接收 <code>useApi</code> 的返回值。这很React！！</p></div><ul><li>第一个参数就是响应式变量，可以在视图中直接使用，或在 <code>setup</code> 中的其他地方以 <code>xx.value</code> 的形式访问。</li><li>第二个参数是更新响应式变量，调用时需要传入想要传递给api方法的参数</li></ul><h3 id="api方法的入参规约" tabindex="-1">API方法的入参规约 <a class="header-anchor" href="#api方法的入参规约" aria-label="Permalink to &quot;API方法的入参规约&quot;">​</a></h3><p>API方法的入参要么是 <code>undefined</code> 要么是继承自 <code>CommonRequest</code> 的对象。下面是 <code>CommonRequest</code> 的定义：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CommonRequest</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    [</span><span style="color:#A6ACCD;font-style:italic;">k</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>其实，<code>CommonRequest</code> 等价于 <code>Record&lt;string, string | number&gt;</code>，说白了就是一个属性值都为 <code>string</code> 或 <code>number</code> 的对象。</p><p>你将不会在ToC的api调用层看到任何高于 <code>CommonRequest</code> 的入参类型定义，ToC将接口约束这一层交给了更高层！！而hook层提供<strong>泛型</strong>来支持类型约束，所以<strong>任何视图层的api调用都必须通过 <code>useApi</code> 的代理</strong>。</p><p>即使hook层提供类型约束支持，但也仅仅严格要求使用者明确响应式变量的类型，而对于api调用方法的入参约束并不强制显式指定，因为不是所有接口都有必要严格指定一个类型约束，一味地要求严格的类型约束将加大开发者的<strong>心智负担</strong>，让代码变得<strong>很重</strong>。</p><p>相反的，<code>useApi</code> 提供了一种弹性的方式，开发者可以在视图层的 <code>type.ts</code> 中定义相关api调用入参类型约束，然后将其显式传入 <code>useApi</code> 的类型参数的<strong>第二个参数</strong>中。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>useApi</code> 中：</p><p>第一个类型参数指定响应式变量的类型，是必须明确指定的</p><p>第二个类型参数指定api调用方法的入参类型，默认退化为 <code>CommonRequest</code>，可选地传入。</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>请注意，如果你显式传入了第二个类型参数，那么其必须继承自 <code>CommonRequest</code>！！</p><p>如：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SomeRequestType</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CommonRequest</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><code>useApi</code> 返回值中的数组第一个元素是响应式对象，第二个元素是响应式对象的更改函数。</p><p>当你想要更改第一个元素的响应式对象的值时，你可以直接调用第二个元素的更改函数，其封装了加载、异步获取、错误处理、响应式对象赋值的一系列操作。</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>即使第二个函数的执行结果是一个 <code>Promise</code>，并会将响应式变量的<strong>新值</strong>回调，你还是不应该利用它来再更改第一个元素的响应式对象，因为其值已经是最新状态了，再次更改没有任何意义！</p><p>只有在你想获得类似Vue3中 <code>watch</code> 钩子的效果时，你才应该使用该 <code>Promise</code> 回调的值。（下面第二节会给出实际的例子）</p></div><h3 id="在非组件中使用" tabindex="-1">在非组件中使用 <a class="header-anchor" href="#在非组件中使用" aria-label="Permalink to &quot;在非组件中使用&quot;">​</a></h3><p>Vue3对Hooks的细粒度支持使我们可以在非组件环境中也使用hooks，说白了就是，<code>useApi</code> 可以用在任何你想用的地方。下面是 <code>init.ts</code> 中的实例：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">basicConfig</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> setBasicConfig</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useApi</span><span style="color:#A6ACCD;">(sysApi</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">getSysBaseList</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">BasicConfig</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">) </span></span>
<span class="line"><span style="color:#82AAFF;">setBasicConfig</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">system</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setBasicConfig</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">basicConfig</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>这个例子还反映了上一节所说的，利用响应式对象更改函数执行后的 <code>Promise</code> 回调来达到 <code>watch</code> 的效果，也就是说，你可以利用其回调来完成一些<strong>副作用影响</strong>。</p><h3 id="延申" tabindex="-1">延申 <a class="header-anchor" href="#延申" aria-label="Permalink to &quot;延申&quot;">​</a></h3><p><code>useApi</code> Hook提供的思路应该被用在更多的地方，当许多组件拥有非常庞大、笨重、冗余的逻辑操作时，封装类似的Hook可以极大提高代码质量。</p><p>使用了 <code>useApi</code> 之后，<code>setup</code> 中的任何异步数据初始化都无需使用 <code>onMounted</code> 钩子了，你只需要非常简单地调用设置响应式对象的方法（还记得吗？<code>useApi</code> 返回值的第二个元素）来完成初始化。</p><p>相似的，如果有任何其他非api调用获取但依然需要异步完成的初始化操作，你可以为该视图编写自定义的hooks来完成初始化工作。</p>`,35),t=[e];function p(c,r,i,y,C,F){return a(),o("div",null,t)}const A=s(l,[["render",p]]);export{D as __pageData,A as default};
